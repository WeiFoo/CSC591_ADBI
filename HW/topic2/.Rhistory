source('~/.active-rstudio-document', echo=TRUE)
train.dists.inv
train.dists.inv[1:5,1:5]
Moran.I(train$oz, train.dists.inv)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
}
y
for (j in 1:n)
{
z[j,] = sum(t((xx[j,]-x[i,]))*(xx[j,]-x[i,]))
xx[1,]-x[1,]
}
z
xx
x
xx
xx[1,]
xx[1,]-x[5,]
zz=t(xx[1,]-x[5,])
zz
zz=xx[1,]-x[5,]
zz
zz[,1:4]*t(zz[,1:4])
t(zz[,1:4])*(zz[,1:4])
zz
t(zz[,1:4])
t(zz[,1:4])[1:3,]
t(zz[,1:4])*zz[,1:4]
zz
kk=t(zz[,1:4])
kk
zz
kk*zz
kk%*%zz
kk%o%zz
kk
zz
kk %*% zz
zz %*% kk
as.vector(zz) %*% as.vector(kk)
is.vector(kk)
as.numeric(kk)
as.numeric(kk[,-3])
as.numeric(kk[,-2])
as.numeric(kk[,-4])
as.numeric(kk[,1:4])
as.numeric(kk[,1:3])
as.numeric(kk[,1:3])
kk
as.numeric(kk[1:3,])
as.numeric(kk) %*% as.numeric(zz)
as.numeric(kk) %*% t(as.numeric(zz))
t(as.numeric(kk)) %*% (as.numeric(zz))
as.numeric(xx[1,]-x[5,]) %*% t(as.numeric(xx[1,]-x[5,]))
as.numeric(xx[1,1:3]-x[5,1:3]) %*% t(as.numeric(xx[1,1:3]-x[5,1:3]))
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
as.numeric(xx[1,1:3]-x[5,1:3]) %*% t(as.numeric(xx[1,1:3]-x[5,1:3]))
k
k %*% t(k)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
k
k %*% t(k)
z
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
z
z[0]
z[1]
z[2]
z[3]
z[4]
n
matrix(0,2,3)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
y
z
z/4
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models[[1]]
models[[0]]
models[[2]]
models[[3]]
models[[4]]
models[[5]]
models[[6]]
models
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
dim(test)
length(test)
test
test[1]
test[1,]
test[1:3,]
test[1,]
test[1,1:3]
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
modes[1]
models[[1]
s
models[[1]]
models[1]
models[1]$mu
models[[1]$mu
models[[1]]$mu
x
x[1,]
x[1,1:3]
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
dim(models)
dim(models[1])
dim(models[[1]])
models
length(models)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
p
ML
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
oneTest
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
results
predicted
View(sigma)
for( i in 1: dim(test)[1])
{
best = -Inf
predicted = 0
for(j in 1: length(models))
{
oneTest = as.matrix(test[i,1:3])
delta = as.matrix(oneTest - models[[j]]$mu)
sigma = models[[j]]$sigma
N = models[[j]]$N
det = determinant(sigma)$modulus[1]
MLE = (2*pi)**(-N/2)*(det**(-0.5))*exp(-0.5*delta%*%(sigma**-1)%*%t(delta))
apriori = models[[j]]$apriori
p = MLE *apriori
if (p > best)
{
best = p
precited = models[[j]]$class
}
}
results = c(results, predicted)
}
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
results
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
models
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
pi
MLE
models[[j]]$class
models[[1]]$class
delta
oneTest
sigma
N
det
MLE
((2*pi)**(-N/2))*(det**(-0.5))
(2*pi)**(-N/2)
det**(-0.5)
exp(-0.5 * delta %*% sigma**(-1)%*% t(delta))
exp(-0.5 * delta %*% sigma**(-1)%*% t(delta))
exp(-0.5 * delta* sigma**(-1)%*% t(delta))
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
exp(-0.5 * delta* sigma**(-1)%*% t(delta))
MLE
thisMLE
testInp
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
test
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
class
highestMLE
install.packages("caret")
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
delta
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
dif
model[[1]]$mu
models[[1]]$mu
dif
model$sigma
model$sig
models[[1]]$sigma
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
MLE
det
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
states
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
crPlots(murderModel)
qqPlot(dtrain$Murder)
durbinWatsonTest(murderModel)
ncvTest(murderModel)
sqrt(vif(murderModel))>2.0
outlierTest(murderModel)
chisq.test(dtrain)
head(dtrain)
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
?crPlot
## Linearity
crPlots(murderModel)
plot(murderModel)
plot(murderModel)
## Linearity
crPlots(murderModel)
## Normality
qqPlot(dtrain$Murder)
##Error
durbinWatsonTest(murderModel)
## Homoscedasticity
ncvTest(murderModel)
## Multicollinearity
sqrt(vif(murderModel))>2.0
## Sensitivity to outliers.
outlierTest(murderModel)
?crPlots
crPlots(m<-lm(prestige~income+education, data=Prestige))
crPlots(m, terms=~ . - education)
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial))
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
## Linearity
crPlots(murderModel)
crPlots(lm (Murder ~ Population + Illiteracy
+ Income + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ Population + Illiteracy + Income + (Frost), data=dtrain))
crPlots(m<-lm(prestige~income+education, data=Prestige))
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(lm (Murder ~ Population + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ log2(Population) + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy) + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy) + sin(Income) + (Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + (Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + sin(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + (Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
## Normality
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + Frost, data=dtrain))
, data=dtrain))
crPlots(lm (Murder ~ Population, data=dtrain))
crPlots(lm (Murder ~ sin(Population), data=dtrain))
?sin
crPlots(lm (Murder ~ sin(Population*pi), data=dtrain))
crPlots(lm (Murder ~ cos(Population*pi), data=dtrain))
crPlots(lm (Murder ~ Population, data=dtrain))
crPlots(lm (Murder ~ log2(Population), data=dtrain))
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
crPlots(lm (Murder ~ (Population), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2), data=dtrain))
crPlots(murderModel)
+ Income + log2(Frost,2), data=dtrain))
+ Income + log2(Frost), data=dtrain))
## Normality
crPlots(lm (Murder ~ Population + Illiteracy
+ Income + log2(Frost), data=dtrain))
qqPlot(dtrain$Murder)
##Error
durbinWatsonTest(murderModel)
## Homoscedasticity
outlierTest(murderModel)
qqPlot(dtrain$Murder)
qqPlot(dtrain)
qqPlot(dtrain$Murder)
ncvTest(murderModel)
library(gvlma)
install.packages("gvlma")
library(gvlma)
print(gvlma(murderModel))
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
crPlots(murderModel)
crPlots(lm (Murder ~ Population + Illiteracy
crPlots(lm (Murder ~ log2(Population) + Illiteracy
+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + Illiteracy+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + sin(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ sin(Population) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ ploy(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
## Normality
crPlots(lm (Murder ~ ploy(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
## Normality
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,3), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,4), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,3) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
ncvTest(murderModel)
## Multicollinearity
sqrt(vif(murderModel))>2.0
?durbinWatsonTest
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
##Error
durbinWatsonTest(murderModel)
ncvTest(murderModel)
sqrt(vif(murderModel))>2.0 ###
outlierTest(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
vif(murderModel)
?vif
crPlots(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
summary (murderModel)
head(dtrain)
dtrain
cov(states)
states * t(states[1,])
states[1,1]
states[1,]
states * t(states)
state[1,]
states[1,]
states[1,]*t(states[1,])
states[1,]*t(states[2,])
t.test
?t.test
t.test(states)
plot(extra ~ group, data = sleep)
rankMatrix(states)
?rankMatrix
rankMatrix(states)
rankMatrix
?
durbinWatsonTest(murderModel) # staticstic =2.44, p-value = 0.256
rankMatrix
rankMatrix()
?rankMatrix
library(Matrix)
rankMatrix(states)
?chiq.test
?chiq
chisq
?chisq
?chisq.test
chisq.test(states)
chisq.test(table(states))
durbinWatsonTest(murderModel) # staticstic =2.44, p-value = 0.256
outlierTest(murderModel) ### p=0.065
durbinWatsonTest(murderModel$residuals) # staticstic =2.44, p-value = 0.256
## Homoscedasticity
ncvTest(murderModel) #  p = 0.935
sqrt(vif(murderModel))
summary(lm(murder~Population+Illiteracity,data=dtrain))
summary(lm(Murder~Population+Illiteracity,data=dtrain))
Illiteracy
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
## Linearity
crPlots(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
## Normality
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
##Error
durbinWatsonTest(murderModel$residuals) # staticstic =2.44, p-value = 0.256
## Homoscedasticity
ncvTest(murderModel) #  p = 0.935
## Multicollinearity
sqrt(vif(murderModel))>2.0 ### False
## Sensitivity to outliers.
outlierTest(murderModel) ### p=0.065
##Model complexity
summary(lm(Murder~Population+Illiteracy,data=dtrain))
summary(murderModel)
summary(lm(Murder~Population+Illiteracy,data=dtrain))
library(car)
library(gdata)
library(AER)
rm(list=ls())
setwd("/Users/WeiFu/Github/CSC591_ADBI/HW/topic2/")
data <-read.xls("eBayAuctions.xls", sheet=1)
attach(data)
set.seed(1)
library(car)
library(gdata)
# library(AER)
rm(list=ls())
setwd("/Users/WeiFu/Github/CSC591_ADBI/HW/topic2/")
data <-read.xls("eBayAuctions.xls", sheet=1)
attach(data)
set.seed(1)
data
data$Category
levels(data$Category)
dummyData <-data.frame()
category <- data$Category
dummyData <-data.frame()
for i in length(levels(category)){
#   dummyData[i,1]
print i
}
for i in length(levels(category)){
#   dummyData[i,1]
print(i)
}
for i in length(levels(category)){
#   dummyData[i,1]
i
}
for (i in length(levels(category))){
#   dummyData[i,1]
i
}
for (i in length(levels(category))){
dummyData[i,1] <- i
}
dummyData[i,1]
dummyData[i,2]
for (i in 1:length(levels(category))){
dummyData[i,1] <- i
}
